package com.less.downloadmanager.lib.util;

import android.content.Context;
import android.os.Environment;
import android.support.annotation.NonNull;

import java.io.File;
import java.net.HttpURLConnection;
import java.util.Locale;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class FileUtils {
    private static final String DOWNLOAD_DIR = "download";

    public static final File getDefaultDownloadDir(Context context) {
        if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
            return new File(context.getExternalCacheDir(), DOWNLOAD_DIR);
        }
        return new File(context.getCacheDir(), DOWNLOAD_DIR);
    }

    public static boolean isSDMounted(){
        return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);
    }

    public static final String getPrefix(String fileName) {
        return fileName.substring(0, fileName.lastIndexOf("."));
    }

    public static final String getSuffix(String fileName) {
        return fileName.substring(fileName.lastIndexOf(".") + 1);
    }

    /**
     * Get file name
     * @param url 根据url获取文件名
     * @param conn 根据HttpConnection 获取文件名
     * @return
     */
    private String getFileName(HttpURLConnection conn,String url) {
        String filename = url.substring(url.lastIndexOf("/") + 1);

        if (null == filename || filename.length() < 1) {// Get file name failed.
            for (int i = 0;; i++) { // Get file name from http header.
                String mine = conn.getHeaderField(i);
                if (mine == null)
                    break; // Exit the loop when go through all http header.
                if ("content-disposition".equals(conn.getHeaderFieldKey(i).toLowerCase(Locale.ENGLISH))) { // Get content-disposition header field returns, which may contain a file name
                    Matcher m = Pattern.compile(".*filename=(.*)").matcher(mine.toLowerCase(Locale.ENGLISH)); // Using regular expressions query file name
                    if (m.find()) {
                        return m.group(1); // If there is compliance with the rules of the regular expression string
                    }
                }
            }
            filename = UUID.randomUUID() + ".tmp";// A 16-byte binary digits generated by a unique identification number
            // (each card has a unique identification number)
            // on the card and the CPU clock as the file name
        }
        return filename;
    }
}
